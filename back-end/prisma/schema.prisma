// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Tags {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CollectionType {
  development
  production
  staging
}

model Collection {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String         @unique
  description String?
  type        CollectionType @default(development)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String?        @db.ObjectId
  user        User?          @relation(fields: [userId], references: [id])
  teamId      String?        @db.ObjectId
  team        Team?          @relation(fields: [teamId], references: [id])
  folders     Folder[]
}

model Folder {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  collectionId String     @db.ObjectId
  collection   Collection @relation(fields: [collectionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  bio          String?
  location     String?
  avatar       String?
  email        String        @unique
  phone        String?
  password     String
  technologies Json[]
  education    Json[]
  experience   Json[]
  languages    String[]
  interests    String[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  teams        Team[]        @relation(fields: [teamIds], references: [id])
  teamIds      String[]      @db.ObjectId
  socialMedia  SocialMedia[]
  Tags         Tags[]
  StressTest   StressTest[]
  collections  Collection[]
}

model SocialMedia {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  platform  Platform
  username  String
  url       String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Platform {
  github
  twitter
  linkedin
}

model Team {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]       @relation(fields: [userIds], references: [id])
  userIds     String[]     @db.ObjectId
  collections Collection[]
}

model StressTest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  endpoint    String
  method      String
  requests    Int
  concurrency Int
  totalTime   Float
  avgTime     Float
  success     Int
  failures    Int
  createdAt   DateTime @default(now())
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
}
